{"version":3,"sources":["services/PokeApiClient.tsx","components/listItem/ListItem.tsx","components/listFilter/FilterOption.tsx","App.tsx","index.tsx"],"names":["getAllPokemon","url","getFromUrl","axios","get","then","response","data","getPokemonType","ListItem","pokeInfo","onButtonClick","key","name","type","value","className","onClick","_","FilterOption","pokeType","App","useState","pokemonPage","setPokemonPage","visiblePokemon","setVisiblePokemon","availableTypes","setAvailableTypes","chosenTypeFilter","setChosenTypeFilter","filteredPokemons","setFilteredPokemons","displayVisible","setDisplayVisible","displayedPokemon","setDisplayedPokemon","INITIAL_URL","TYPE_URL","offset","setOffset","a","results","typeURL","responseData","alertFetchFail","reason","alert","pokemonButtonClicked","pokemonShortInfo","displayedPokes","useEffect","fetchPokemonType","fetchData","pokemonImage","listItem","map","pokemon","filterOption","getPokemonPaginateLink","LIMIT","isFilterActive","fetchPokemonsByFilter","filteredPokemon","pokemonInfos","wrapper","slice","catch","fetchPokemons","allPokemon","allPokemons","previousPage","newOffset","sliceVisiblePokemons","filteredPreviousPage","allPokemonPreviousPage","nextPage","length","filteredNextPage","count","allPokemonNextPage","getStat","stat","stats","filter","statObj","base_stat","htmlFor","required","id","defaultValue","onChange","e","target","src","sprites","front_default","undefined","alt","base_experience","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.395b104b.chunk.js","sourcesContent":["import {\r\n  PokemonPage,\r\n  PokemonShortInfo,\r\n  TypePage,\r\n  FilteredPokemons,\r\n  PokemonDetails,\r\n} from \"../Model\";\r\nimport axios, { AxiosResponse } from \"axios\";\r\n\r\n// nie wiem jak możnby to dodać do reduxa (chyba, że jako oddzielna funkcja)\r\n\r\n// axios.get(\"https://jsonplaceholder.typicode.com/todos/1\")\r\n//   .then(response => console.log(\"response\", response.data))\r\n\r\nconst url: string = \"\";\r\n// dając przy gecie interface mówimy, żeby napisał domyślny typ pobieranych info\r\nexport function getAllPokemon(url: string): Promise<PokemonPage> {\r\n  return getFromUrl<PokemonPage>(url);\r\n}\r\n\r\nfunction getFromUrl<T>(url: string): Promise<T> {\r\n  return axios.get<T>(url).then((response: AxiosResponse<T>) => {\r\n    return response.data;\r\n  });\r\n}\r\n\r\nexport function FetchAPIData<T>(x: T): Promise<T> {\r\n  return getFromUrl<T>(\"\");\r\n}\r\n\r\n// Pobieranie info z poziomu niżej -> url w konkretnym pokemonie\r\nexport function getPokemonInfo(\r\n  data: PokemonShortInfo\r\n): Promise<PokemonShortInfo> {\r\n  return getFromUrl<PokemonShortInfo>(url);\r\n}\r\n\r\nexport function getPokemonType(url: string): Promise<TypePage> {\r\n  return getFromUrl<TypePage>(url);\r\n}\r\n\r\nexport function getFilteredPokemons(url: string): Promise<FilteredPokemons> {\r\n  return getFromUrl<FilteredPokemons>(url);\r\n}\r\n\r\nexport function getAllToPaginate(url: string): Promise<PokemonShortInfo> {\r\n  return getFromUrl<PokemonShortInfo>(url);\r\n}\r\n\r\nexport function getDisplayedPokemon(url: string): Promise<PokemonDetails> {\r\n  return getFromUrl<PokemonDetails>(url);\r\n}\r\nexport function getPokemonImage(url: string): Promise<JSX.Element> {\r\n  return getFromUrl<JSX.Element>(url);\r\n}\r\n\r\n// Tą funkcję możemy dodawać na wszystkich poziomach pobierania info\r\n\r\n// Promise = wartość, którą Ci dostarczę\r\n\r\n// TODO: do przeczytania: Type Parameter, generics\r\n// Zapisujemy typ, który potem możemy dowolnie nadpisywać (jak parametr\r\n// function print<T>(x: T): T {\r\n//     console.log(x);\r\n//     return x;\r\n// }\r\n// print<string>(\"asd\");\r\n\r\n// funkcja ktora przyjmuje url i typ jaki ma zwracać\r\n// Prozą -> Parametr ma typ <T> i zwraca <T> - możemy go nadpisać jak chcemy\r\n\r\n// export async function getAllPokemon(url:string) {\r\n//     return new Promise((resolve, rejects) => {\r\n//         fetch(url)\r\n//         .then(res => res.json())\r\n//         .then(data => {\r\n//             resolve(data)\r\n//         })\r\n//     })\r\n// }\r\n","import React from \"react\";\r\nimport { PokemonShortInfo } from \"../../Model\";\r\n\r\n// chciałbym aby kliknięcie w pokemona\r\n\r\nexport function ListItem(\r\n  pokeInfo: PokemonShortInfo,\r\n  onButtonClick: (x: PokemonShortInfo) => void\r\n): JSX.Element {\r\n  return (\r\n    <button\r\n      key={pokeInfo.name}\r\n      type=\"button\"\r\n      value={pokeInfo.name}\r\n      className=\"nes-btn is-primary list-item\"\r\n      // \"_\" = argument przyjmujemy, ale nie jest wykorzystany (pomocnicze)\r\n      onClick={(_) => onButtonClick(pokeInfo)}\r\n    >\r\n      {pokeInfo.name}\r\n    </button>\r\n  );\r\n}\r\nexport default ListItem;\r\n","import React from \"react\";\r\nimport { TypeShortInfo } from \"../../Model\";\r\n\r\nexport function FilterOption(pokeType: TypeShortInfo): JSX.Element {\r\n  return <option \r\n  key={pokeType.name}\r\n  value={pokeType.name}>{pokeType.name}</option>;\r\n}\r\nexport default FilterOption;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\nimport {\n  getAllPokemon,\n  getPokemonType,\n  getFilteredPokemons,\n  getDisplayedPokemon,\n} from \"./services/PokeApiClient\";\nimport {\n  PokemonPage,\n  PokemonShortInfo,\n  TypePage,\n  FilteredPokemons,\n  PokemonDetails,\n  PokemonImage,\n  PokemonStats,\n  StatName,\n} from \"./Model\";\nimport { ListItem } from \"./components/listItem/ListItem\";\nimport FilterOption from \"./components/listFilter/FilterOption\";\n\nfunction App() {\n  const [pokemonPage, setPokemonPage] = useState<PokemonPage | null>(null);\n  const [visiblePokemon, setVisiblePokemon] = useState<Array<PokemonShortInfo>>(\n    []\n  );\n  const [availableTypes, setAvailableTypes] = useState<TypePage | null>(null);\n  const [chosenTypeFilter, setChosenTypeFilter] = useState<string>(\"\");\n  const [filteredPokemons, setFilteredPokemons] = useState<\n    Array<PokemonShortInfo>\n  >([]);\n\n  const [displayVisible, setDisplayVisible] = useState<\n    \"pokemon_info_not_holder\" | \"pokemon_info_holder\"\n  >(\"pokemon_info_not_holder\");\n\n  const [\n    displayedPokemon,\n    setDisplayedPokemon,\n  ] = useState<PokemonDetails | null>(null);\n\n  const INITIAL_URL: string = \"https://pokeapi.co/api/v2/pokemon\";\n  const TYPE_URL: string = \"https://pokeapi.co/api/v2/type\";\n  let [offset, setOffset] = useState<number>(0);\n  const LIMIT = 20;\n\n  // 1. Kliknięcie w listItem zmienia styl kontenera z info\n  // 2. Kliknięcie w listItem bierze info (nadpisuje stan ) z INITIAL_URL + \"/\" + pokemon.name\n  // 3. Z pobranych info wyciąga : name, basestat hp [5], base stat attack [4],\n\n  // FETCHOWANIE POKEMON PAGE\n  async function fetchData(url?: string) {\n    if (!url) {\n      return;\n    }\n    let response: PokemonPage = await getAllPokemon(url);\n    setPokemonPage(response);\n    setVisiblePokemon(response.results);\n  }\n  // FETCHOWANIE POKEMON TYPE\n  async function fetchPokemonType(typeURL: string) {\n    if (!typeURL) {\n      return;\n    }\n    let responseData: TypePage = await getPokemonType(typeURL);\n    setAvailableTypes(responseData);\n  }\n  // ŁADOWANIE KOMPONENTÓW\n  useEffect(() => {\n    fetchPokemonType(TYPE_URL);\n    fetchData(INITIAL_URL);\n  }, []);\n\n  function alertFetchFail(reason: any): void {\n    alert(\"Cannot fetch data, reason: \" + reason);\n  }\n\n  // WYWOŁYWANIE DETALI POKEMONÓW\n  function pokemonButtonClicked(pokemonShortInfo: PokemonShortInfo) {\n    // fetchował potrzebne info pokemona z URL\n    // przypisywał je do displayedPokemon\n    // Zmieniał z index kontenera\n    getDisplayedPokemon(INITIAL_URL + \"/\" + pokemonShortInfo.name).then(\n      (displayedPokes: PokemonDetails) => {\n        setDisplayedPokemon(displayedPokes);\n        setDisplayVisible(\"pokemon_info_holder\");\n      }\n    );\n  }\n  // ZAMYKANIE DISPALY\n  function closeModal() {\n    setDisplayVisible(\"pokemon_info_not_holder\");\n    setDisplayedPokemon(null);\n  }\n\n  // PRZYPISYWANIE AKCJI DO LISTY POKEMONÓW\n  const listItem: Array<JSX.Element> = visiblePokemon.map((pokemon) =>\n    ListItem(pokemon, pokemonButtonClicked)\n  );\n\n  // PRZYPISYWANIE TABLICY TYPÓW DO OPCJI SELECT\n  const filterOption = availableTypes?.results.map(FilterOption);\n\n  // PEŁNA LISTA POKEMONOW Z PAGINACJI\n  function getPokemonPaginateLink(offset: number, LIMIT: number): string {\n    return (\n      \"https://pokeapi.co/api/v2/pokemon?offset=\" + offset + \"&limit=\" + LIMIT\n    );\n  }\n  // const allPokemonsPaginateLink: string =\n  //   \"https://pokeapi.co/api/v2/pokemon?offset=\" + offset + \"&limit=\" + LIMIT;\n\n  // SPRAWDZANIE CZY FILTRY SĄ AKTYWNE\n  function isFilterActive(): boolean {\n    return chosenTypeFilter !== \"\";\n  }\n\n  // DOSTOSOWYWANIE LISTY POKEMONÓW PO WYBRANYM FILTRZE\n  function fetchPokemonsByFilter() {\n    getFilteredPokemons(TYPE_URL + \"/\" + chosenTypeFilter)\n      .then((filteredPokemon: FilteredPokemons) => {\n        let pokemonInfos: Array<PokemonShortInfo> = filteredPokemon.pokemon.map(\n          (wrapper) => wrapper.pokemon\n        );\n        setFilteredPokemons(pokemonInfos);\n        setOffset(0);\n        setVisiblePokemon(pokemonInfos.slice(0, LIMIT));\n      })\n      .catch((reason) => alertFetchFail(reason));\n  }\n\n  // POBIERANIE 20 POKEMTÓW BEZ FILTRA - A STRUKTURY API\n  function fetchAllPokemons() {\n    getAllPokemon(INITIAL_URL)\n      .then((allPokemon: PokemonPage) => {\n        let allPokemons: Array<PokemonShortInfo> = allPokemon.results;\n        setVisiblePokemon(allPokemons);\n      })\n      .catch((reason) => alertFetchFail(reason));\n  }\n\n  // FETCHOWANIE POKEMONÓW ZALEŻNIE OD AKTYWNEGO FILTRA\n  function fetchPokemons() {\n    if (isFilterActive()) {\n      fetchPokemonsByFilter();\n    } else {\n      fetchAllPokemons();\n    }\n  }\n\n  // FUNKCJA WYWOŁUJĄCA ZMIANĘ STRONY NA POPRZEDNIĄ\n  function previousPage() {\n    // czy bierzemy nastepny pokemonPage, czy liste pokemonow po typie\n    if (isFilterActive()) {\n      filteredPreviousPage();\n    } else {\n      allPokemonPreviousPage();\n    }\n  }\n\n  // POPRZEDNIA STRONA LISTY POKEMONÓW PO FILTRZE\n  function filteredPreviousPage() {\n    if (offset === 0) {\n      return;\n    }\n    let newOffset = (offset -= LIMIT);\n    setOffset(newOffset);\n    const sliceVisiblePokemons = filteredPokemons.slice(offset, offset + LIMIT);\n    setVisiblePokemon(sliceVisiblePokemons);\n  }\n\n  // POPRZEDNA STRONA LIŚCIE BEZ FILTRÓW\n  function allPokemonPreviousPage() {\n    if (offset === 0) {\n      return;\n    }\n\n    let newOffset = (offset -= LIMIT);\n    setOffset(newOffset);\n\n    getAllPokemon(getPokemonPaginateLink(newOffset, LIMIT))\n      .then((allPokemon: PokemonPage) => {\n        // let allPokemons : Array<PokemonShortInfo> = ;\n        setVisiblePokemon(allPokemon.results);\n      })\n      .catch((reason: any) => alertFetchFail(reason));\n  }\n\n  // FUNKCJA WYWOŁUJĄCA ZMIANĘ STRONY NA KOLEJNĄ\n\n  function nextPage() {\n    if (isFilterActive()) {\n      filteredNextPage();\n    } else {\n      allPokemonNextPage();\n    }\n  }\n\n  // KOLEJNA STRONA LISTY POKEMONÓW PO FILTRZE\n  function filteredNextPage() {\n    if (filteredPokemons.length <= offset + LIMIT) {\n      return;\n    }\n    let newOffset = (offset += LIMIT);\n    setOffset(newOffset);\n    const sliceVisiblePokemons = filteredPokemons.slice(offset, offset + LIMIT);\n    setVisiblePokemon(sliceVisiblePokemons);\n  }\n\n  // KOLEJNA STRONA LISTY POKEMONÓW BEZ FILTRA\n  function allPokemonNextPage() {\n    if (pokemonPage == null || pokemonPage.count <= offset + LIMIT) {\n      return;\n    }\n    let newOffset = (offset += LIMIT);\n    setOffset(newOffset);\n\n    getAllPokemon(getPokemonPaginateLink(newOffset, LIMIT)).then(\n      (allPokemon: PokemonPage) => {\n        let allPokemons: Array<PokemonShortInfo> = allPokemon.results;\n        setVisiblePokemon(allPokemons);\n      }\n    );\n  }\n\n  //\n  function imageForPokemon(pokemonImage: PokemonImage | undefined): string {\n    return pokemonImage?.front_default === null ||\n      pokemonImage?.front_default === undefined\n      ? \"pokeball.png\"\n      : pokemonImage.front_default;\n  }\n\n  function getStat(stat: StatName): number | undefined {\n    return displayedPokemon?.stats.filter(\n      (statObj: PokemonStats) => statObj.stat.name === stat\n    )[0].base_stat;\n  }\n\n  return (\n    <div className=\"App\">\n      {/* KONTENER NA CAŁOŚĆ */}\n      <div className=\"contaner_components nes-container  \">\n        {/* FILTRY PO POKEMONACH */}\n        <div className=\"filters nes-container with-title  is-rounded\">\n          <p className=\"title\"> FILTER POKEMONS </p>\n\n          <label htmlFor=\"default_select\" className=\"select_type\">\n            Filter by type\n          </label>\n          <div className=\"nes-select\">\n            {/* FILTER ONE */}\n            <select\n              required\n              id=\"default_select\"\n              defaultValue=\"\"\n              onChange={(e) => {\n                setChosenTypeFilter(e.target.value);\n              }}\n            >\n              <option value=\"\">No filter</option>\n              {filterOption}\n            </select>\n          </div>\n          <div className=\"show-pokemon\">\n            <button\n              type=\"button\"\n              className=\"nes-btn is-primary btn--filt\"\n              onClick={() => fetchPokemons()}\n            >\n              SEE YOUR POKEMONS!\n            </button>\n          </div>\n        </div>\n\n        {/* POKEBALL */}\n        <div className=\"spacer\">\n          <i className=\"nes-logo\"></i>\n        </div>\n\n        {/* KONTENER WYŚWIETLAJĄCY LISTĘ POKEMONÓW */}\n        <div className=\"container_display-pokemon-list nes-container with-title  is-rounded\">\n          <p className=\"title\"> SEE MORE INFO </p>\n\n          {/* LIST OF ITEMS */}\n          <div className=\"pokemon-list nes-container is-rounded\">\n            {listItem}\n          </div>\n\n          {/* LIST PAGINATION */}\n          <div className=\"pagination_holder\">\n            <button\n              type=\"button\"\n              onClick={() => previousPage()}\n              className=\"nes-btn is-primary btn-previous-page\"\n            >\n              PREVIOUS\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => nextPage()}\n              className=\"nes-btn is-primary btn-next-page\"\n            >\n              NEXT\n            </button>\n          </div>\n        </div>\n\n        {/* BLANK SPACE COVERING DISPLAY */}\n        <div className=\"blank_cover\"></div>\n\n        {/* POKEMON DETAIL DISPLAY */}\n        <div className={displayVisible}>\n          <div className=\"img_holder\">\n            <h1> {displayedPokemon?.name} </h1>\n            <img\n              className=\"pokemon-image\"\n              src={imageForPokemon(displayedPokemon?.sprites)}\n              alt=\"displayed pokemon\"\n            ></img>\n          </div>\n\n          <div className=\"info-holder nes-container is-centered\">\n            <p className=\"nes-text is-success\">HEALTH:</p>\n            <h3 className=\"nes-text is-success\">{getStat(\"hp\")}</h3>\n            <p className=\"nes-text is-error\">ATTACK:</p>\n            <h3 className=\"nes-text is-error\">{getStat(\"attack\")}</h3>\n\n            <p className=\"nes-text is-primary\">BASE EXPERIENCE:</p>\n            <h3 className=\"nes-text is-primary\">\n              {displayedPokemon?.base_experience}\n            </h3>\n\n            {/* <p className=\"nes-text is-error\">Error</p>\n            <p className=\"nes-text is-disabled\">Disabled</p> */}\n          </div>\n          {/* CLOSING DISPLAY BUTTON   */}\n          <button\n            type=\"button\"\n            className=\"nes-btn is-primary close-display\"\n            onClick={() => closeModal()}\n          >\n            CLOSE\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}